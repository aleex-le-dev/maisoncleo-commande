/**
 * Service de pr√©chargement global des images
 * G√®re le pr√©chargement intelligent en arri√®re-plan
 */

import ImageOptimizationService from './imageOptimizationService'

class GlobalPreloadService {
  constructor() {
    this.isInitialized = false
    this.preloadQueue = new Set()
    this.isPreloading = false
    this.preloadedPages = new Set() // Cache des pages d√©j√† pr√©charg√©es
  }

  /**
   * Initialiser le service de pr√©chargement global
   */
  initialize() {
    if (this.isInitialized) return
    
    this.isInitialized = true
    console.log('üöÄ Service de pr√©chargement global initialis√©')
    
    // D√©marrer le pr√©chargement intelligent en arri√®re-plan
    this.startIntelligentPreloading()
  }

  /**
   * D√©marrer le pr√©chargement intelligent
   */
  startIntelligentPreloading() {
    // Pr√©charger les images les plus communes apr√®s un d√©lai
    setTimeout(() => {
      this.preloadCommonImages()
    }, 2000) // Attendre 2 secondes apr√®s le chargement initial
  }

  /**
   * Pr√©charger les images communes
   */
  async preloadCommonImages() {
    if (this.isPreloading) return
    
    this.isPreloading = true
    
    try {
      console.log('üîÑ Pr√©chargement intelligent des images communes...')
      
      // R√©cup√©rer les images des articles les plus r√©cents
      // (Cette logique sera impl√©ment√©e plus tard avec de vraies donn√©es)
      
      console.log('‚úÖ Pr√©chargement intelligent termin√©')
    } catch (error) {
      console.warn('Erreur pr√©chargement intelligent:', error)
    } finally {
      this.isPreloading = false
    }
  }

  /**
   * Pr√©charger les images d'une page sp√©cifique
   */
  async preloadPageImages(articles = [], pageType = 'unknown') {
    if (!articles || articles.length === 0) return

    try {
      // V√©rifier si cette page a d√©j√† √©t√© pr√©charg√©e
      if (this.preloadedPages.has(pageType)) {
        const stats = ImageOptimizationService.getCacheStats()
        console.log(`‚ö° Page ${pageType} d√©j√† pr√©charg√©e - navigation instantan√©e (cache: ${stats.cacheSize} images)`)
        return
      }

      // V√©rifier si les images sont d√©j√† en cache
      const stats = ImageOptimizationService.getCacheStats()
      if (stats.cacheSize > 10) { // Seuil plus √©lev√© pour √©viter les faux positifs
        console.log(`‚ö° Images d√©j√† en cache (${stats.cacheSize} images) - navigation instantan√©e`)
        this.preloadedPages.add(pageType)
        return
      }

      console.log(`üîÑ Pr√©chargement page ${pageType}: ${articles.length} articles (cache actuel: ${stats.cacheSize} images)`)
      await ImageOptimizationService.preloadPageImages(articles)
      
      // V√©rifier le cache apr√®s pr√©chargement
      const finalStats = ImageOptimizationService.getCacheStats()
      console.log(`‚úÖ Page ${pageType} pr√©charg√©e (cache final: ${finalStats.cacheSize} images)`)
      this.preloadedPages.add(pageType)
    } catch (error) {
      console.warn('Erreur pr√©chargement page:', error)
    }
  }

  /**
   * Obtenir les statistiques du service
   */
  getStats() {
    return {
      isInitialized: this.isInitialized,
      isPreloading: this.isPreloading,
      queueSize: this.preloadQueue.size,
      cacheStats: ImageOptimizationService.getCacheStats()
    }
  }
}

// Instance singleton
const globalPreloadService = new GlobalPreloadService()

export default globalPreloadService
